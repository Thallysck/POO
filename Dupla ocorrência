class No:
    def __init__(self, carga: object = None,
                 ant: 'No' = None,
                 prox: 'No' = None):
        self.carga = carga
        self.prox = prox
        self.ant = ant

    def __str__(self):
        return str(self.carga)


class ListaEncadeada:
    def __init__(self):
        self.cabeca = None
        self.cauda = None

    def imprimir_lista(self):
        if self.cabeca is None:
            print("Lista vazia")
            return

        atual: 'No' = self.cabeca
        while atual is not None:
            print(atual)
            atual = atual.prox

    def imprimir_lista_invertida(self):
        if self.cabeca is None:
            print("Lista vazia")
            return

        atual: 'No' = self.cauda
        while atual is not None:
            print(atual)
            atual = atual.ant

class ListaDuplamenteEncadeada(ListaEncadeada):  # herdamos da classe ListaEncadeada para reaproveitar o método imprimir_lista
    def __init__(self):
        self.cabeca = None
        self.cauda = None

    def inserir_no_inicio(self, valor: object):
        novo: 'No' = No(valor)
        if self.cabeca is None:
            self.cabeca = self.cauda = novo
        else:
            novo.prox = self.cabeca
            self.cabeca = novo
            novo.prox.ant = novo

    def inserir_no_final(self, valor):
        novo: 'No' = No(valor)
        if self.cabeca is None:
            self.cabeca = self.cauda = novo
        else:
            novo.ant = self.cauda  # O anterior do nó novo será a cauda atual
            novo.ant.prox = novo  # O próximo do elemento anterior será o novo elemento a ser inserido
            self.cauda = novo  # a cauda passa a ser o elemento novo a ser inserido

    def remover_do_inicio(self):
        if self.cabeca is None:
            print("Lista vazia")
            return

        if self.cabeca == self.cauda:
            self.cabeca = self.cauda = None
        else:
            self.cabeca = self.cabeca.prox
            self.cabeca.ant = None  # O anterior da nova cabeça agora passa a apontar para None

    def remover_do_final(self):
        if self.cabeca is None:
            print("Lista vazia")
            return

        if self.cabeca == self.cauda:
            self.cabeca = self.cauda = None
        else:
            # Note que agora não é mais necessário percorrer a lista até o final, basta começar navegando pela cauda
            self.cauda = self.cauda.ant  # Faz a cauda apontar agora para o penúltimo elemento da lista
            self.cauda.prox = None  # o próximo da nova cauda agora passa a pontar para None

    def remover_ocorrencias(self, lista, valor):
        atual = lista.cabeca
        while atual is not None:
            if valor == atual.carga:
                if atual.ant is not None:
                    if atual.prox is not None:
                        atual.ant.prox = atual.prox
                        atual.prox.ant = atual.ant
                    else:
                        atual.ant.prox = None
                        self.cauda = atual.ant
                else:
                    atual.prox.ant = None
                    self.cabeca = atual.prox
            atual = atual.prox

lista: 'ListaDuplamenteEncadeada' = ListaDuplamenteEncadeada()
lista.inserir_no_inicio(20)
lista.inserir_no_inicio(80)
lista.inserir_no_inicio(20)
lista.inserir_no_inicio(40)
lista.inserir_no_inicio(10)
lista.inserir_no_inicio(20)
lista.remover_ocorrencias(lista,20)
lista.imprimir_lista()
